class Node:

      def __init__(self,info): #constructor of class

          self.info = info  #information for node
          self.left = None  #left leef
          self.right = None #right leef
          self.level = None #level none defined

      def __str__(self):

          return str(self.info) #return as string


class searchtree:

      def __init__(self): #constructor of class

          self.root = None


      def create(self,val):  #create binary search tree nodes

          if self.root == None:

             self.root = Node(val)

          else:

             current = self.root

             while 1:

                 if val < current.info:

                   if current.left:
                      current = current.left
                   else:
                      current.left = Node(val)
                      break;      

                 elif val > current.info:
                 
                    if current.right:
                       current = current.right
                    else:
                       current.right = Node(val)
                       break;      

                 else:
                    break 
   

      def inorder(self,node):
            
           if node is not None:
              
              self.inorder(node.left)
              print (node.info)
              self.inorder(node.right)


      def preorder(self,node):
            
           if node is not None:
              
              print (node.info)
              self.preorder(node.left)
              self.preorder(node.right)


      def postorder(self,node):
            
           if node is not None:
              
              self.postorder(node.left)
              self.postorder(node.right)
              print (node.info)

                        
tree = searchtree()     
num_array = list()
num = input("Enter how many elements you want:")
print ('Enter numbers in to put in tree: ')
for i in range(int(num)):
    n = input("num :")
    num_array.append(int(n))
for i in num_array:
    tree.create(i)
print ('Inorder Traversal')
tree.inorder(tree.root) 
print ('Preorder Traversal')
tree.preorder(tree.root) 
print ('Postorder Traversal')
tree.postorder(tree.root)
